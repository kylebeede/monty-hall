{"version":3,"sources":["Door.js","App.js","reportWebVitals.js","index.js"],"names":["Door","index","hasCar","onClick","isOpen","useState","isSelected","setIsSelected","handleClick","useCallback","className","App","Math","floor","random","correctDoorIndex","selectedDoorIndex","setSelectedDoorIndex","hasConfirmedSelection","setHasConfirmedSelection","openDoorIndex","setOpenDoorIndex","handleDoorSelect","console","log","doors","i","push","instructionText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAEe,SAASA,EAAT,GAAmD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OACtD,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAcC,uBAAY,WAC/BF,GAAc,GACdJ,EAAQF,KACN,CAACA,EAAOE,IAEX,OACC,qBAAKO,UAAS,mBAAcR,EAAS,SAAU,WAA/C,SACC,qBAAKQ,UAAS,gBAAWJ,EAAa,WAAa,GAArC,YAA2CF,EAAS,WAAa,IAAMD,QAASK,M,MC+DlFG,MArEf,WAsCE,IArCA,MAAgDN,mBAASO,KAAKC,MAAM,EAAAD,KAAKE,SAAwC,IAAjH,mBAAOC,EAAP,KACA,GADA,KACkDV,mBAAS,OAA3D,mBAAOW,EAAP,KAA0BC,EAA1B,KACA,EAA0DZ,oBAAS,GAAnE,mBAAOa,EAAP,KAA8BC,EAA9B,KACA,EAA0Cd,mBAAS,MAAnD,mBAAOe,EAAP,KAAsBC,EAAtB,KAEMC,EAAmBb,uBAAY,SAACR,GAEpC,GADAsB,QAAQC,IAAI,mBAAoBvB,GACP,MAArBe,EACFG,GAAyB,GACzBF,EAAqBhB,OAChB,CACL,IACImB,EAAgB,KAGhBA,EAJwBR,KAAKC,MAAsB,EAAhBD,KAAKE,UAG5B,IAAVb,GAAoC,IAArBc,EACD,EACG,IAAVd,GAAoC,IAArBc,EACR,EAEA,EAGJ,IAAVd,GAAoC,IAArBc,EACD,EACG,IAAVd,GAAoC,IAArBc,EACR,EAEA,EAIpBE,EAAqBhB,GACrBoB,EAAiBD,MAElB,CAACL,EAAkBC,IAEhBS,EAAQ,GACLC,EAAI,EAAGA,EAxCC,EAwCcA,IAC7BD,EAAME,KAAK,cAAC3B,EAAD,CAAcC,MAAOyB,EAAGxB,OAAQwB,IAAMX,EAAkBZ,QAASmB,EAAkBlB,OAAQsB,IAAMN,GAAiBF,GAAvGQ,IAGxB,IAAIE,EAAkB,GAatB,OAZyB,MAArBZ,EACFY,EAAkB,qEACRV,EAEDA,GAAyBF,IAAsBD,EACxDa,EAAkB,yCACTV,GAAyBF,IAAsBD,IACxDa,EAAkB,0CAJlBA,EAAkB,8HAOpBL,QAAQC,IAAI,YAGV,sBAAKd,UAAU,YAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,oBAAIA,UAAU,SAAd,gCACA,0FACCkB,KAEH,qBAAKlB,UAAU,kBAAf,SACGe,QCzDMI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.840bafaa.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\r\n\r\nexport default function Door({ index, hasCar, onClick, isOpen }) {\r\n\tconst [isSelected, setIsSelected] = useState(false);\r\n\r\n\tconst handleClick = useCallback(() => {\r\n\t\tsetIsSelected(true);\r\n\t\tonClick(index);\r\n\t}, [index, onClick]);\r\n\r\n\treturn (\r\n\t\t<div className={`backDoor ${hasCar ? 'hasCar': 'hasGoat'}`}>\r\n\t\t\t<div className={`door  ${isSelected ? 'selected' : ''} ${isOpen ? 'doorOpen' : ''}`} onClick={handleClick} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useCallback, useState } from 'react';\nimport Door from './Door';\nimport './App.css';\n\nconst DOOR_COUNT = 3;\n\nfunction App() {\n  const [correctDoorIndex, setCorrectDoorIndex] = useState(Math.floor(Math.random() * ((DOOR_COUNT - 1) - 0 + 1) + 0));\n  const [selectedDoorIndex, setSelectedDoorIndex] = useState(null);\n  const [hasConfirmedSelection, setHasConfirmedSelection] = useState(false);\n  const [openDoorIndex, setOpenDoorIndex] = useState(null);\n\n  const handleDoorSelect = useCallback((index) => {\n    console.log('handleDoorSelect', index);\n    if (selectedDoorIndex != null) {\n      setHasConfirmedSelection(true);\n      setSelectedDoorIndex(index);\n    } else {\n      const shouldOpenFirstDoor = Math.floor(Math.random() * 2);\n      let openDoorIndex = null;\n      if (shouldOpenFirstDoor) {\n        if (index !== 0 && correctDoorIndex !== 0) {\n          openDoorIndex = 0;\n        } else if (index !== 1 && correctDoorIndex !== 1) {\n          openDoorIndex = 1;\n        } else {\n          openDoorIndex = 2;\n        }\n      } else {\n        if (index !== 2 && correctDoorIndex !== 2) {\n          openDoorIndex = 2;\n        } else if (index !== 1 && correctDoorIndex !== 1) {\n          openDoorIndex = 1;\n        } else {\n          openDoorIndex = 0;\n        }\n      }\n\n      setSelectedDoorIndex(index);\n      setOpenDoorIndex(openDoorIndex);\n    }\n  }, [correctDoorIndex, selectedDoorIndex]);\n\n  const doors = [];\n  for (let i = 0; i< DOOR_COUNT; i++) {\n    doors.push(<Door key={i} index={i} hasCar={i === correctDoorIndex} onClick={handleDoorSelect} isOpen={i === openDoorIndex || hasConfirmedSelection} />);\n  }\n\n  let instructionText = '';\n  if (selectedDoorIndex == null) {\n    instructionText = <p>Click the door you think has the car</p>;\n  } else if (!hasConfirmedSelection) {\n    instructionText = <p>You can now either switch doors or keep your current choice. Click the door you want to open.</p>\n  } else if (hasConfirmedSelection && selectedDoorIndex === correctDoorIndex) {\n    instructionText = <p>Correct!</p>\n  } else if (hasConfirmedSelection && selectedDoorIndex !== correctDoorIndex) {\n    instructionText = <p>Wrong :(</p>\n  }\n\n  console.log('rerender');\n\n  return (\n    <div className=\"container\">\n      <div className=\"instruction-container\">\n        <h1 className=\"header\">Monty Hall Problem</h1>\n        <p>There is a car behind one door. The other two have goats.</p>\n        {instructionText}\n      </div>\n      <div className=\"doors-container\">\n        {doors}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}